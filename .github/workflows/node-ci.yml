name: Node.js CI

on:
  push:
    branches: [main]

permissions:
  contents: write

env:
  TAG: 2.1.0

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      # Step 3: Install dependencies
      - name: Install dependencies
        run: make install

      # Step 4: Run linting
      - name: Run linting
        run: make lint

      # Step 5: Run tests
      - name: Run tests
        run: make test

      # Step 6: Build artifact.
      #- name: Build artifact & Tagging
      #  run: make docker-build

      # Step 7: Docker login to DockerHub
      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 8: Docker build and push (with dynamic image tag)
      - name: Docker build and push
        run: |
          TAG=${{ env.TAG }}
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nodeproject:${TAG} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/nodeproject:${TAG}

      # Step 9: SSH into Azure server and install Docker (if necessary), then restart the container with the latest image
      - name: SSH into Azure server using password
        run: |
          # Install sshpass to handle password-based SSH login
          sudo apt-get install -y sshpass

          # Check SSH connection to the remote server
          echo "Checking SSH connection to the remote server"
          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }} 'echo "SSH Connection Successful"'

          # Run commands on the remote server
          echo "Running commands on the Azure server"
          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }} << 'EOF'

          # Install Docker if it's not already installed
          if ! command -v docker &> /dev/null
          then
              echo "Docker not found, installing Docker..."
              sudo apt-get update
              sudo apt-get install -y \
                  apt-transport-https \
                  ca-certificates \
                  curl \
                  gnupg-agent \
                  software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          else
              echo "Docker is already installed."
          fi

          # Add user to the Docker group (azureuser in this case)
          sudo usermod -aG docker azureuser

          # Restart the SSH session to apply the group changes (this is necessary to take effect immediately)
          echo "Restarting the SSH session to apply Docker group membership"
          sudo systemctl restart ssh

          # Ensure the user can access Docker without sudo
          echo "Waiting for user to be added to Docker group"
          sleep 5


          # Pull the latest Docker image
          docker pull rajeshecb70/nodeproject:${TAG}

          # Check if the container is already running
          CONTAINER_NAME="nodeproject"

          # Get the container ID if it's running
          CONTAINER_ID=$(docker ps -q -f name=$CONTAINER_NAME)

          # If the container is running, stop and remove it
          if [ ! -z "$CONTAINER_ID" ]; then
              echo "Container is already running. Stopping and removing it..."
              docker stop $CONTAINER_ID
              docker rm $CONTAINER_ID
          else
              echo "No existing container found, proceeding to start a new one."
          fi

          # Run the Docker container with the latest image
          docker run -d -p 3000:3000 --name $CONTAINER_NAME rajeshecb70/nodeproject:${TAG}

          EOF