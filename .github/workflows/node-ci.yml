name: Node.js CI

on:
  push:
    branches: [main]

permissions:
  contents: write

#env:
#  VERSION: 1.1.7

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run linting
      - name: Run linting
        run: npx eslint server.js

      # Step 5: Run tests
      - name: Run tests
        run: npm test

      # Step 6: Build artifact
      - name: Build artifact
        run: |
          tar -czf nodeproject.tar.gz ./*

      # Step 7: Debug file existence
      - name: Debug file existence
        run: |
          echo "Listing files in the workspace"
          ls -alh ${GITHUB_WORKSPACE}
          pwd
          echo "Checking if the tar file exists"
          ls -alh nodeproject.tar.gz      

      # Step 8: Upload artifact to the Azure server via SSH (password-based)
      - name: SSH into Azure server using password
        run: |
          # Install sshpass to handle password-based SSH login
          sudo apt-get install -y sshpass

          # Debug: Check if SSH connection works without password (just for debugging)
          echo "Checking SSH connection to the remote server"
          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }} 'echo "SSH Connection Successful"'

          # Now, execute your commands on the remote server
          echo "Uploading the artifact to Azure server"
          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" scp nodeproject.tar.gz ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }}:/home/azureuser/

          # Run commands on the remote server
          echo "Running commands on the Azure server"
          sshpass -p "${{ secrets.AZURE_SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_SERVER_USERNAME }}@${{ secrets.AZURE_SERVER_IP }} << 'EOF'
          
          cd /home/azureuser
          mkdir -p /home/azureuser/project
          mv nodeproject.tar.gz /home/azureuser/project
          cd /home/azureuser/project
          # Uncomment below lines to extract and run commands on the server
          # tar -xzf nodeproject.tar.gz
          # cd nodeproject
          # npm install
          # npm start
          # Extract the artifact
          tar -xzf nodeproject.tar.gz
          
          # Install dependencies
          npm install
          
          # Check if the PM2 process is already running
          if pm2 list | grep -q "node-project"; then
              echo "Restarting the running application 'nodeproject'..."
              pm2 restart nodeproject
          else
              echo "Starting the application 'nodeproject'..."
              pm2 start server.js --name nodeproject -i max
          fi
          
          # Save the PM2 process list
          pm2 save
          
          EOF


#      # Step 9: Upload artifact to the Azure server via SSH#
#      - name: Upload artifact to Azure server
#        uses: appleboy/scp-action@v0.1.7
#        with:
#          host: ${{ secrets.AZURE_SERVER_IP }}
#          username: ${{ secrets.AZURE_SERVER_USERNAME }}
#          password: ${{ secrets.AZURE_SERVER_PASSWORD }}
#          source: "${GITHUB_WORKSPACE}/nodeproject.tar.gz"
#          target: "/home/azureuser/"



#      - name: executing remote ssh commands using password
#        uses: appleboy/ssh-action@v1.2.0
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.KEY }}
#          port: ${{ secrets.PORT }}
#          script: |      
#            cd /home/ubuntu
#            tar -xvf nodeproject.tar.gz
#            npm i
#            if  pm2 list | grep -q "node-project"; then
#                echo "Restarting the running application 'nodeproject'..."
#                pm2 restart nodeproject
#            else
#                echo "Starting the application 'nodeproject..."
#                pm2 start server.js --name nodeproject -i max
#            fi
#            pm2 save
            
